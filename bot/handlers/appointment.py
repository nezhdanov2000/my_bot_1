from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes, 
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    CommandHandler,
    filters
)

from typing import List, Tuple  

from datetime import datetime, timedelta
import logging
from bot.database.database import get_connection
from bot.database import (
    add_client,
    create_appointment,
    get_free_slots,
    get_client_appointments
)
from bot.keyboards import get_main_menu, get_days_keyboard, get_time_keyboard

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
SELECT_DAY, SELECT_TIME, CONFIRM, CANCEL_SELECT = range(4)
DAYS_OF_WEEK = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


# --------------------------------------------------------------------------------------------



async def send_user_data_to_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    try:
        conn = get_connection()
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
        cursor.execute('''
            SELECT id, telegram_id, full_name, username, created_at 
            FROM clients 
            WHERE telegram_id = %s
        ''', (user.id,))
        client_data = cursor.fetchone()

        if client_data:
            # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ç–µ–∂–∞
            client_id, telegram_id, full_name, username, created_at = client_data
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏
            cursor.execute('''
                SELECT a.day_of_week, a.start_time, t.end_time 
                FROM appointments a
                JOIN time_slots t ON a.day_of_week = t.day_of_week 
                    AND a.start_time = t.start_time
                WHERE a.client_id = %s
            ''', (client_id,))
            appointments = cursor.fetchall()

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = (
                f"üë§ –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:\n"
                f"ID: {client_id}\n"
                f"Telegram ID: {telegram_id}\n"
                f"–ò–º—è: {full_name}\n"
                f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{username}\n"
                f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {created_at}\n\n"
                f"üìÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏:\n"
            )
            
            for day, start, end in appointments:
                message += f"‚Ä¢ {day} {start} - {end}\n"

            await context.bot.send_message(
                chat_id=5098354385,
                text=message
            )
            await update.message.reply_text("‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
        else:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ")

        cursor.close()
        conn.close()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö")


# -------------------------------------------------------------------------------------------

def get_booking_handler() -> ConversationHandler:
    """–§–∞–±—Ä–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞ –∑–∞–ø–∏—Å–∏"""
    return ConversationHandler(
        entry_points=[
            MessageHandler(filters.Text(["üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º"]), start_booking)
        ],
        states={
            SELECT_DAY: [CallbackQueryHandler(select_day, pattern='^day_')],
            SELECT_TIME: [CallbackQueryHandler(select_time, pattern='^time_')],
            CONFIRM: [CallbackQueryHandler(confirm_booking, pattern='^confirm_')],
            CANCEL_SELECT: [CallbackQueryHandler(confirm_cancel, pattern='^cancel_')]
        },
        fallbacks=[
            CommandHandler('cancel', lambda u,c: ConversationHandler.END)
        ]
    )


async def start_booking(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–∏—Å–∏"""
    user = update.effective_user
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    client_id = add_client(
        telegram_id=user.id,
        full_name=user.full_name,
        username=user.username
    )
    context.user_data['client_id'] = client_id
    
    await update.message.reply_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏:",
        reply_markup=get_days_keyboard()
    )
    return SELECT_DAY


async def select_day(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
    query = update.callback_query
    await query.answer()
    
    day_of_week = query.data.replace('day_', '')
    context.user_data['day_of_week'] = day_of_week
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –∏–∑ –ë–î
    free_slots = get_free_slots(day_of_week)
    
    if not free_slots:
        await query.edit_message_text(
            f"‚ùå –ù–∞ {day_of_week} –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å."
        )
        return ConversationHandler.END
    
    await query.edit_message_text(
        f"üïí –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è {day_of_week}:",
        reply_markup=get_time_keyboard(free_slots)
    )
    return SELECT_TIME


async def select_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    query = update.callback_query
    await query.answer()
    
    start_time = query.data.replace('time_', '')
    context.user_data['start_time'] = start_time
    
    day_of_week = context.user_data['day_of_week']
    end_time = (datetime.strptime(start_time, '%H:%M') + timedelta(hours=1)).strftime('%H:%M')
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_yes"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_no")
        ]
    ]
    
    await query.edit_message_text(
        f"üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å:\n\n"
        f"‚Ä¢ –î–µ–Ω—å: {day_of_week}\n"
        f"‚Ä¢ –í—Ä–µ–º—è: {start_time} - {end_time}",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CONFIRM


async def confirm_booking(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'confirm_yes':
        try:
            client_id = context.user_data['client_id']
            day = context.user_data['day_of_week']
            time = context.user_data['start_time']

            logger.info(f"Attempting to create appointment: {day} {time} for client {client_id}")
            
            if create_appointment(client_id, day, time):
                await query.edit_message_text("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
            else:
                await query.edit_message_text("‚ùå –≠—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        
        except Exception as e:
            logger.error(f"Error in confirmation: {str(e)}")
            await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏")

    else:
        await query.edit_message_text("‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    return ConversationHandler.END

# ---------------------------------------------------------------------

# bot/handlers/appointment.py

import logging
from telegram import Update
from telegram.ext import ContextTypes
from bot.database import get_connection

logger = logging.getLogger(__name__)

async def handle_cancel_appointment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã"""
    user_id = update.effective_user.id
    conn = None
    try:
        conn = get_connection()
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ JOIN —Å clients
        cursor.execute("""
            SELECT a.id, a.day_of_week, a.start_time 
            FROM appointments a
            JOIN clients c ON a.client_id = c.id
            WHERE c.telegram_id = %s
        """, (user_id,))
        appointments = cursor.fetchall()
        
        if not appointments:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π ‚ùå")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
        buttons = []
        for appt in appointments:
            appt_id, day, time = appt
            buttons.append([InlineKeyboardButton(
                f"{day} {time}",
                callback_data=f"cancel_{appt_id}"
            )])

        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
            reply_markup=InlineKeyboardMarkup(buttons)
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_cancel_appointment: {str(e)}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–∏—Å–µ–π")
    finally:
        if conn and conn.is_connected():
            cursor.close()
            conn.close()

def cancel_appointment(appointment_id: int) -> bool:
    """–û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Å–ª–æ—Ç"""
    conn = None
    try:
        conn = get_connection()
        cursor = conn.cursor()
        conn.start_transaction()

        cursor.execute(
            "SELECT day_of_week, start_time FROM appointments WHERE id = %s",
            (appointment_id,)
        )
        result = cursor.fetchone()
        
        if not result:
            logger.error("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            conn.rollback()
            return False
            
        day, time = result

        cursor.execute(
            "DELETE FROM appointments WHERE id = %s",
            (appointment_id,)
        )

        cursor.execute(
            "UPDATE time_slots SET is_available = TRUE WHERE day_of_week = %s AND start_time = %s",
            (day, time)
        )

        conn.commit()
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã: {str(e)}", exc_info=True)
        if conn:
            conn.rollback()
        return False
    finally:
        if conn and conn.is_connected():
            cursor.close()
            conn.close()

# –£–î–ê–õ–ò–¢–¨ –î–£–ë–õ–ò–†–£–Æ–©–£–Æ–°–Ø –§–£–ù–ö–¶–ò–Æ confirm_cancel!

async def confirm_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    conn = None
    try:
        appointment_id = int(query.data.split("_")[1])
        user_id = query.from_user.id
        
        conn = get_connection()
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ JOIN
        cursor.execute("""
            SELECT a.day_of_week, a.start_time 
            FROM appointments a
            JOIN clients c ON a.client_id = c.id
            WHERE a.id = %s AND c.telegram_id = %s
        """, (appointment_id, user_id))
        
        if not cursor.fetchone():
            await query.edit_message_text("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤")
            return

        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–º–µ–Ω—É
        if cancel_appointment(appointment_id):
            await query.edit_message_text("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞!")
        else:
            await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_cancel: {str(e)}", exc_info=True)
        await query.edit_message_text("‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")
    finally:
        if conn and conn.is_connected():
            cursor.close()
            conn.close()
# -------------------------------------------------------------------------------------------

async def show_appointments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        user = update.effective_user
        logger.info(f"User {user.id} requested appointments")
        
        appointments = get_client_appointments(user.id)
        logger.info(f"Found {len(appointments)} appointments")
        
        if not appointments:
            await update.message.reply_text("üóíÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
            return

        response = ["üî∑ –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏:\n"]
        for idx, (day, start, end) in enumerate(appointments, 1):
            response.append(f"{idx}. {day}: {start} - {end}")
        
        await update.message.reply_text("\n".join(response))
        logger.info("Appointments sent successfully")

    except Exception as e:
        logger.error(f"Error in show_appointments: {str(e)}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π")


# --------------------------------------------------------------------------------------------

