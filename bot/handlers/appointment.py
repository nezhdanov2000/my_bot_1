from bot.keyboards.main_menu import get_main_menu
from telegram.ext import CallbackContext
from telegram.ext import ConversationHandler
from telegram import Update
from bot.database import (
    create_appointment,
    get_available_slots,
    get_user_appointments,
    cancel_appointment
)
from datetime import datetime, timedelta




def confirm_booking(update: Update, context: CallbackContext) -> int:
    if update.message.text.lower() == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é':
        update.message.reply_text(
            "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!",
            reply_markup=get_main_menu()
        )
    else:
        update.message.reply_text(
            "‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=get_main_menu()
        )
    return ConversationHandler.END

def start_booking(update: Update, context: CallbackContext) -> int:
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
        reply_markup=get_main_menu()
    )
    return True

def show_appointments(update: Update, context: CallbackContext) -> int:
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
        reply_markup=get_main_menu()
    )
    return True

def cancel_appointment(update: Update, context: CallbackContext) -> int:
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
        reply_markup=get_main_menu()
    )
    return True














from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from bot.database import (
    add_client,
    create_appointment,
    get_free_slots,
    get_client_appointments
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
SELECT_DAY, SELECT_TIME, CONFIRM = range(3)
DAYS_OF_WEEK = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']

async def start_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–∏—Å–∏"""
    user = update.effective_user
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º/–ø–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    client_id = add_client(
        telegram_id=user.id,
        full_name=user.full_name,
        username=user.username
    )
    
    context.user_data['client_id'] = client_id
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏
    keyboard = [
        [InlineKeyboardButton(day, callback_data=f"day_{day}")]
        for day in DAYS_OF_WEEK
    ]
    
    await update.message.reply_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return SELECT_DAY

async def select_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
    query = update.callback_query
    await query.answer()
    
    day_of_week = query.data.replace('day_', '')
    context.user_data['day_of_week'] = day_of_week
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã
    free_slots = get_free_slots(day_of_week)
    
    if not free_slots:
        await query.edit_message_text(
            f"‚ùå –ù–∞ {day_of_week} –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å."
        )
        return ConversationHandler.END
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
    keyboard = [
        [InlineKeyboardButton(slot, callback_data=f"time_{slot}")]
        for slot in free_slots
    ]
    
    await query.edit_message_text(
        f"üïí –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è {day_of_week}:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return SELECT_TIME

async def select_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    query = update.callback_query
    await query.answer()
    
    start_time = query.data.replace('time_', '')
    context.user_data['start_time'] = start_time
    
    day_of_week = context.user_data['day_of_week']
    end_time = (datetime.strptime(start_time, '%H:%M') + timedelta(hours=1)).strftime('%H:%M')
    
    await query.edit_message_text(
        f"üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å:\n\n"
        f"‚Ä¢ –î–µ–Ω—å: {day_of_week}\n"
        f"‚Ä¢ –í—Ä–µ–º—è: {start_time} - {end_time}\n\n"
        "–ù–∞–∂–º–∏—Ç–µ /confirm –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )
    
    return CONFIRM

async def confirm_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    if update.message.text == '/confirm':
        client_id = context.user_data['client_id']
        day_of_week = context.user_data['day_of_week']
        start_time = context.user_data['start_time']
        
        if create_appointment(client_id, day_of_week, start_time):
            await update.message.reply_text(
                "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                f"–î–µ–Ω—å: {day_of_week}\n"
                f"–í—Ä–µ–º—è: {start_time} - {(datetime.strptime(start_time, '%H:%M') + timedelta(hours=1)).strftime('%H:%M')}"
            )
        else:
            await update.message.reply_text(
                "‚ùå –≠—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å –∑–∞–Ω–æ–≤–æ."
            )
    else:
        await update.message.reply_text("‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    return ConversationHandler.END

async def show_my_appointments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–ø–∏—Å–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    telegram_id = update.effective_user.id
    appointments = get_client_appointments(telegram_id)
    
    if not appointments:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
        return
    
    response = ["–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:", ""]
    for day, start, end in appointments:
        response.append(f"üìå {day}: {start} - {end}")
    
    await update.message.reply_text("\n".join(response))
