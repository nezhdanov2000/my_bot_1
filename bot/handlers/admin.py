from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    filters
)
from config import ADMIN_IDS
import mysql.connector
import logging
from datetime import time

from bot.database.database import get_connection

async def show_slots(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        conn = get_connection()
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT day_of_week, start_time, end_time, is_available
            FROM time_slots
            ORDER BY 
                FIELD(day_of_week, 
                    '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫','–í—Ç–æ—Ä–Ω–∏–∫','–°—Ä–µ–¥–∞',
                    '–ß–µ—Ç–≤–µ—Ä–≥','–ü—è—Ç–Ω–∏—Ü–∞','–°—É–±–±–æ—Ç–∞','–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'),
                start_time
        ''')
        
        slots = cursor.fetchall()
        message = "üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–ª–æ—Ç–æ–≤:\n\n"
        for day, start, end, available in slots:
            status = "‚úÖ –°–≤–æ–±–æ–¥–µ–Ω" if available else "‚õî –ó–∞–Ω—è—Ç"
            start_time = str(start).rjust(5, '0')  # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            end_time = str(end).rjust(5, '0')
            message += f"üóì {day}: {start_time} - {end_time} | {status}\n"
            
        if not slots:
            message = "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤"
            
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=message
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ—Ç–æ–≤: {str(e)}", exc_info=True)
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö"
        )
    finally:
        if 'cursor' in locals(): cursor.close()
        if 'conn' in locals(): conn.close()

# –û–±–Ω–æ–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
SELECT_ACTION, SELECT_DAY, INPUT_TIME, CONFIRM = range(4)

async def admin_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return ConversationHandler.END
        
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç", callback_data="add_slot")],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Å–ª–æ—Ç–æ–≤", callback_data="list_slots")]
    ]
    await update.message.reply_text(
        "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return SELECT_ACTION

async def select_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "add_slot":
        days_keyboard = [
            [InlineKeyboardButton("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", callback_data="day_–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫")],
            [InlineKeyboardButton("–í—Ç–æ—Ä–Ω–∏–∫", callback_data="day_–í—Ç–æ—Ä–Ω–∏–∫")],
            [InlineKeyboardButton("–°—Ä–µ–¥–∞", callback_data="day_–°—Ä–µ–¥–∞")],
            [InlineKeyboardButton("–ß–µ—Ç–≤–µ—Ä–≥", callback_data="day_–ß–µ—Ç–≤–µ—Ä–≥")],
            [InlineKeyboardButton("–ü—è—Ç–Ω–∏—Ü–∞", callback_data="day_–ü—è—Ç–Ω–∏—Ü–∞")],
            [InlineKeyboardButton("–°—É–±–±–æ—Ç–∞", callback_data="day_–°—É–±–±–æ—Ç–∞")],
            [InlineKeyboardButton("–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", callback_data="day_–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ]
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:",
            reply_markup=InlineKeyboardMarkup(days_keyboard)
        )
        return SELECT_DAY
    elif query.data == "list_slots":
        await show_slots(update, context)
        return ConversationHandler.END

async def select_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "cancel":
        await query.edit_message_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return ConversationHandler.END
    
    context.user_data['day'] = query.data.split("_")[1]
    await query.edit_message_text(
        f"üìÖ –î–µ–Ω—å: {context.user_data['day']}\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú-–ß–ß:–ú–ú\n"
        "–ü—Ä–∏–º–µ—Ä: 14:30-16:00"
    )
    return INPUT_TIME

async def input_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    time_input = update.message.text
    try:
        start_str, end_str = time_input.split('-')
        start_time = time.fromisoformat(start_str.strip() + ":00")
        end_time = time.fromisoformat(end_str.strip() + ":00")
        
        context.user_data['start_time'] = start_time
        context.user_data['end_time'] = end_time
        
        confirm_keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
        ]
        
        await update.message.reply_text(
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n"
            f"–î–µ–Ω—å: {context.user_data['day']}\n"
            f"–í—Ä–µ–º—è: {start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')}\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞?",
            reply_markup=InlineKeyboardMarkup(confirm_keyboard)
        )
        return CONFIRM
    except Exception as e:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú-–ß–ß:–ú–ú\n"
            "–ü—Ä–∏–º–µ—Ä: 14:30-16:00"
        )
        return INPUT_TIME

async def confirm_slot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "confirm":
        try:
            conn = get_connection()
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO time_slots 
                (day_of_week, start_time, end_time)
                VALUES (%s, %s, %s)
            ''', (
                context.user_data['day'],
                context.user_data['start_time'].strftime('%H:%M:%S'),
                context.user_data['end_time'].strftime('%H:%M:%S')
            ))
            conn.commit()
            
            await query.edit_message_text("‚úÖ –°–ª–æ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        except mysql.connector.Error as err:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {err.msg}")
        finally:
            cursor.close()
            conn.close()
    else:
        await query.edit_message_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    context.user_data.clear()
    return ConversationHandler.END

def get_admin_handler():
    return ConversationHandler(
        entry_points=[CommandHandler("admin", admin_start)],
        states={
            SELECT_ACTION: [CallbackQueryHandler(select_action)],
            SELECT_DAY: [CallbackQueryHandler(select_day)],
            INPUT_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_time)],
            CONFIRM: [CallbackQueryHandler(confirm_slot)]
        },
        fallbacks=[
            CommandHandler("cancel", lambda u,c: ConversationHandler.END),
            MessageHandler(filters.Regex("^‚ùå –û—Ç–º–µ–Ω–∞$"), lambda u,c: ConversationHandler.END)
        ],
        allow_reentry=True
    )